//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace HotFix.Data
{

public sealed partial class RewardData :  Bright.Config.BeanBase 
{
    public RewardData(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { var __json0 = _json["reward"]; if(!__json0.IsArray) { throw new SerializationException(); } Reward = new System.Collections.Generic.List<RewardStruct>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { RewardStruct __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = RewardStruct.DeserializeRewardStruct(__e0);  }  Reward.Add(__v0); }   }
        { if(!_json["show"].IsNumber) { throw new SerializationException(); }  Show = _json["show"]; }
        PostInit();
    }

    public RewardData(int id, System.Collections.Generic.List<RewardStruct> reward, int show ) 
    {
        this.Id = id;
        this.Reward = reward;
        this.Show = show;
        PostInit();
    }

    public static RewardData DeserializeRewardData(JSONNode _json)
    {
        return new RewardData(_json);
    }

    /// <summary>
    /// 索引
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 奖励
    /// </summary>
    public System.Collections.Generic.List<RewardStruct> Reward { get; private set; }
    /// <summary>
    /// 奖励显示
    /// </summary>
    public int Show { get; private set; }

    public const int __ID__ = -610771047;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Reward) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Reward) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Reward:" + Bright.Common.StringUtil.CollectionToString(Reward) + ","
        + "Show:" + Show + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
